# modules/users/models.py
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from modules.core.db import Base

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)
    phone_number = Column(String, nullable=True)
    hashed_password = Column(String, nullable=False)
    role = Column(String, default="patient", nullable=False)

    patient = relationship("Patient", back_populates="user", uselist=False)
    doctor = relationship("Doctor", back_populates="user", uselist=False)


# modules/users/schemas.py
from pydantic import BaseModel, EmailStr, Field

# -------------------- Input schema for creating a user --------------------
class UserCreate(BaseModel):
    username: str
    password: str
    role: str = "patient"  # default to patient
    email: EmailStr
    phone_number: str | None = None

# -------------------- Output schema --------------------
class UserOut(BaseModel):
    id: int
    username: str
    role: str
    email: EmailStr
    phone_number: str | None = None

    model_config = {"from_attributes": True}


# modules/users/schemas.py
from pydantic import BaseModel, EmailStr, Field

# -------------------- Input schema for creating a user --------------------
class UserCreate(BaseModel):
    username: str
    password: str
    role: str = "patient"  # default to patient
    email: EmailStr
    phone_number: str | None = None

# -------------------- Output schema --------------------
class UserOut(BaseModel):
    id: int
    username: str
    role: str
    email: EmailStr
    phone_number: str | None = None

    model_config = {"from_attributes": True}


# modules/users/crud.py
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from modules.users.models import User

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# -------------------- CREATE --------------------
def create_user(db: Session, username: str, password: str, role: str = "patient"):
    hashed_password = pwd_context.hash(password)
    new_user = User(
        username=username,
        hashed_password=hashed_password,
        role=role
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user

# -------------------- READ --------------------
def get_user_by_username(db: Session, username: str):
    return db.query(User).filter(User.username == username).first()

def get_all_users(db: Session):
    return db.query(User).all()

def get_users_by_role(db: Session, role: str):
    return db.query(User).filter(User.role == role).all()

# -------------------- UPDATE --------------------
def update_user_role(db: Session, username: str, new_role: str):
    user = get_user_by_username(db, username)
    if user:
        user.role = new_role
        db.commit()
        db.refresh(user)
    return user

def update_user_password(db: Session, username: str, new_password: str):
    user = get_user_by_username(db, username)
    if user:
        user.hashed_password = pwd_context.hash(new_password)
        db.commit()
        db.refresh(user)
    return user

# -------------------- DELETE --------------------
def delete_user(db: Session, username: str):
    user = get_user_by_username(db, username)
    if user:
        db.delete(user)
        db.commit()
    return user


# modules/users/routes.py

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from modules.auth.security import get_current_user
from modules.core.db import get_db
from modules.users.models import User

router = APIRouter(prefix="/users", tags=["users"])

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


# -------------------- GET ALL USERS (admin only) --------------------
@router.get("/")
def read_all_users(current_user=Depends(get_current_user), db: Session = Depends(get_db)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Admin access required")
    return db.query(User).all()


# -------------------- GET SINGLE USER --------------------
@router.get("/{username}")
def read_user(username: str, current_user=Depends(get_current_user), db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == username).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # Allow self-view or admin-view
    if current_user.username != username and current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Not allowed")
    return user


# -------------------- GET USERS BY ROLE (admin only) --------------------
@router.get("/role/{role}")
def read_users_by_role(role: str, current_user=Depends(get_current_user), db: Session = Depends(get_db)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Admin access required")
    return db.query(User).filter(User.role == role).all()


# -------------------- UPDATE USER ROLE (admin only) --------------------
@router.put("/{username}/role")
def update_role(username: str, new_role: str, current_user=Depends(get_current_user), db: Session = Depends(get_db)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Admin access required")

    user = db.query(User).filter(User.username == username).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    user.role = new_role
    db.commit()
    db.refresh(user)
    return {"msg": f"{username}'s role updated to {new_role}"}


# -------------------- UPDATE OWN PASSWORD --------------------
@router.put("/{username}/password")
def update_password(username: str, new_password: str, current_user=Depends(get_current_user), db: Session = Depends(get_db)):
    if current_user.username != username and current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Not allowed")

    user = db.query(User).filter(User.username == username).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    user.hashed_password = pwd_context.hash(new_password)
    db.commit()
    db.refresh(user)
    return {"msg": "Password updated successfully"}


# -------------------- DELETE USER (admin only) --------------------
@router.delete("/{username}")
def delete(username: str, current_user=Depends(get_current_user), db: Session = Depends(get_db)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Admin access required")

    user = db.query(User).filter(User.username == username).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    db.delete(user)
    db.commit()
    return {"msg": f"User {username} deleted successfully"}
